/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 1);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

//import 'foundation-sites/js/foundation.core';
//import 'foundation-sites/js/foundation.util.mediaQuery';

// Animated svg sections
module.exports = function () {
    function AnimatedSheet(svgSelector, options) {
        _classCallCheck(this, AnimatedSheet);

        d3.selection.prototype.moveToFront = function () {
            return this.each(function () {
                this.parentNode.appendChild(this);
            });
        };

        this.svgElement = $(svgSelector);
        //if(this.svgElement) {
        //    this.svg = svgElement;
        //} else {
        if (!this.svgElement.length) {
            console.error('No svg found by selector "' + svgSelector + '"');
            return false;
        }

        this.d3Svg = d3.select(svgSelector).attr('width', options.width ? options.width : '100%');

        var self = this;

        //Foundation.MediaQuery._init();

        // resize viewbox on small displays
        var reformatViewbox = function reformatViewbox() {
            var sheetWidth = 1920;
            var sheetHeight = 1080;
            var positionShiftX = 0;
            var positionShiftY = -(1 / window.innerWidth) * 100 * 100 * 25;
            var viewboxValue = positionShiftX + ' ' + positionShiftY + ' ' + sheetWidth + ' ' + sheetHeight;

            viewboxValue = "0 -150 1920 2000";

            //console.log('reformat', positionShiftY);

            var small = 640;
            var medium = 1024;

            self.d3Svg.attr('height', 2000).attr('viewBox', viewboxValue).attr('preserveAspectRatio', 'xMinYMin meet');

            //console.log(window.innerWidth,  medium);

            // empty when using webpack (https://github.com/zurb/foundation-sites/issues/10363):
            //if(Foundation.MediaQuery.current === 'small') {
            if (window.innerWidth <= small) {
                //console.log('setting sheet to small');
                self.d3Svg.attr('height', 667);
            } else
                //if(Foundation.MediaQuery.current === 'medium') {
                if (window.innerWidth <= medium) {
                    //console.log('setting sheet to medium');
                    self.d3Svg.attr('height', 1024);
                }
        };

        this.scopes = [];

        if (options.defs) {
            options.defs.forEach(function (def, index) {
                if (def.filter) {
                    def.filter(self.d3Svg);
                }
            });
        }

        //this.init = function() {
        options.keyframes.forEach(function (keyframe, scopeIndex) {
            var createScope = keyframe.create(self.d3Svg);
            if (createScope.element) {
                createScope.element.attr('visibility', 'visible');
            } else {
                console.warn('The create function should return the element key, so it can be accessed in the animate/interpolate function via the "createScope" parameter');
            }
            self.scopes[scopeIndex] = createScope;
        });
        reformatViewbox();
        window.addEventListener('resize', reformatViewbox);
        //}();
        this.keyframes = options.keyframes;

        return this.animate();
    }

    _createClass(AnimatedSheet, [{
        key: 'animate',
        value: function animate() {
            var self = this;
            var h = 1080;
            var svgPosition = this.svgElement.position().top;
            var progress = window.pageYOffset - svgPosition + h;
            this.keyframes.forEach(function (keyframe, scopeIndex) {
                var from = self.resizeBreakpointsToMedia(0, keyframe.from).y;
                var to = self.resizeBreakpointsToMedia(0, keyframe.to).y;
                if (keyframe.interpolate) {
                    var percent = 0;
                    // start default value
                    if (progress < from) {
                        percent = 0;
                    }
                    // all values inbetween
                    if (progress >= from && progress <= to) {
                        var totalLength = to - from;
                        var progressFromStart = progress - from;
                        var openPercent = progressFromStart * 100 / totalLength;
                        percent = Math.min(Math.max(0, openPercent), 100) / 100;
                    }
                    // end default value
                    if (progress > to) {
                        percent = 1;
                    }
                    //console.log('from', from, 'to', to, 'progress', progress, 'percent', percent);
                    keyframe.interpolate(self.d3Svg, self.scopes[scopeIndex], percent);
                } else {
                    //console.log('position', keyframe.position, 'progress', progress, 'remove', keyframe.remove);
                    if (progress >= keyframe.position && !keyframe.running) {
                        var animatedElement = keyframe.animate(self.d3Svg, self.scopes[scopeIndex]);
                        if (keyframe.remove) {
                            animatedElement.on('end', function () {
                                this.remove();
                            });
                        }
                        keyframe.running = true;
                    }
                }
            });
        }
    }, {
        key: 'destroy',
        value: function destroy() {}
    }, {
        key: 'resizeBreakpointsToMedia',
        value: function resizeBreakpointsToMedia(x, y) {
            var factor = 1.115;
            if (Foundation.MediaQuery.current === 'medium') {
                factor = 0.84;
            }
            if (Foundation.MediaQuery.current === 'small') {
                factor = 0.72;
            }

            return {
                x: x * factor,
                y: y * factor
            };
        }
    }], [{
        key: 'easeOutElastic',
        value: function easeOutElastic(t) {
            var p = 0.4;
            return Math.pow(2, -10 * t) * Math.sin((t - p / 4) * (2 * Math.PI) / p) + 1;
        }
    }]);

    return AnimatedSheet;
}();

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(2);


/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var positionHelper = __webpack_require__(3);
var popupIcons = __webpack_require__(4);
var pathAnimation = __webpack_require__(5);
var animatedSheet = __webpack_require__(0);

var firstAnimation = __webpack_require__(6);
var secondAnimation = __webpack_require__(7);
var thirdAnimation = __webpack_require__(8);

$(document).foundation();

// TODO: generalize svg attribute initialization somewhere
/*var screenWidth = 1920;
var screenHeight = 2000;
var positionShiftX = 0;
var positionShiftY = -(1/(window.innerWidth))*100*100*25;
var viewboxValue = positionShiftX+' '+positionShiftY+' '+screenWidth+' '+screenHeight;

var d3Svg = d3
    .select('#svg-1')
    .attr('width', '100%')
    .attr('height', '2000')
    .attr('viewBox', viewboxValue)
    .attr('preserveAspectRatio', 'xMinYMin meet');*/

var path1 = new pathAnimation();
var icons1 = new popupIcons();

var sheet1 = firstAnimation;
var sheet2 = secondAnimation;
var sheet3 = thirdAnimation;

d3.select(window).on('scroll.scroller', function () {
    path1.animate();
    icons1.animate();
    sheet1.animate();
    sheet2.animate();
    sheet3.animate();
});

//var helper = new positionHelper().show();

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Helper that shows x/y position of the cursor
module.exports = function () {
    function PositionHelper() {
        _classCallCheck(this, PositionHelper);

        this.positionDisplay = d3.select('body').append('div').attr('data-allow-html', true).attr('class', 'tooltip top').style('display', 'none');
        this.centerOffsetDisplay = d3.select('body').append('div').attr('class', 'tooltip right').style('display', 'none');
        this.scrollDisplay = d3.select('body').append('span').attr('class', 'tooltip bottom').style('width', '200px').style('text-align', 'center').style('display', 'none');
    }

    _createClass(PositionHelper, [{
        key: 'show',
        value: function show() {
            var self = this;

            d3.select(window).on('mousemove', function () {
                self.positionDisplay.html('x: ' + d3.event.pageX + '<br /> y: ' + d3.event.pageY).style('top', d3.event.pageY - 100 + 'px').style('left', d3.event.pageX - 34 + 'px').style('display', 'inline');
                var centerOffset = d3.event.pageX - window.innerWidth / 2;
                self.centerOffsetDisplay.html('center: ' + centerOffset).style('top', d3.event.pageY - 25 + 'px').style('left', d3.event.pageX + 35 + 'px').style('display', 'inline');
            });

            d3.select(window).on('scroll', function () {
                self.scrollDisplay.html('scroll: ' + window.pageYOffset).style('top', window.pageYOffset + 100 + 'px').style('left', $(window).width() - 200 + 'px').style('display', 'inline');
            });
        }
    }]);

    return PositionHelper;
}();

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// CSS Icon Animations
module.exports = function () {
    function PopupIcons() {
        _classCallCheck(this, PopupIcons);
    }

    _createClass(PopupIcons, [{
        key: 'init',
        value: function init() {
            window.addEventListener('pathEnd', this.animate);
        }
    }, {
        key: 'animate',
        value: function animate() {
            var animatedElements = $('.animated:visible');

            animatedElements.each(function (index, element) {
                // Popup animation triggered when icon is scrolled into view
                if ($(element).attr('class').indexOf('animate-popup') === -1 && $(element).attr('class').indexOf('animate-view-popup') !== -1) {
                    var viewportTop = $(document).scrollTop();
                    var viewportBottom = viewportTop + $(window).height();
                    var elementTop = Math.round($(element).offset().top);
                    if (elementTop + 300 < viewportBottom) {
                        $(element).addClass('animate-popup');
                    }
                }
            });
        }
    }]);

    return PopupIcons;
}();

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Scroll bound line animation
//import * as d3 from "d3";
//var d3 = require("d3");

module.exports = function () {
    function PathAnimation() {
        _classCallCheck(this, PathAnimation);

        var w = 1920; // resolution the viewbox scaling is based on
        var h = 1080;

        var svg = d3.select('#svg-1');

        var path = [[w / 2 - 5, 200], [w / 2 + 30, 300], [w / 2 - 70, 400], [w / 2 + 100, 520], [w / 2 - 100, 620], [w / 2 - 960, 660], [w / 2 - 940, 390], [w / 2 + 50, 450], [w / 2 + 160, 1410], [w / 2 + 190, 1410], [w / 2 + 450, 1300], [w / 2 + 500, 1300], [w / 2 + 1000, 5000]];

        var bezierLine = d3.line().x(function (d) {
            return d[0];
        }).y(function (d) {
            return d[1];
        }).curve(d3.curveBasis);

        this.progress = 0;

        this.stroke = svg.selectAll('line').data([window.pageYOffset]).enter().append('path').attr('d', bezierLine(path)).attr('stroke', '#FFFFFF').attr('stroke-width', 10).attr('fill', 'none').attr('stroke-linecap', 'round').attr('stroke-dasharray', function () {
            var strokeLength = this.getTotalLength();
            this.progress = this.getTotalLength() - window.pageYOffset;
            return strokeLength + ' ' + strokeLength;
        }).attr('stroke-dashoffset', function () {
            return this.getTotalLength() - window.pageYOffset;
        });
    }

    _createClass(PathAnimation, [{
        key: 'animate',
        value: function animate() {
            this.stroke.attr('stroke-dashoffset', function () {
                var posY = window.pageYOffset;
                //var forwardOnlyProgress = Math.min(progress, this.getTotalLength()-posY);
                //var progressWithLimit = Math.max(0, forwardOnlyProgress);
                var lineSpeed = 4;
                if (Foundation.MediaQuery.current === 'medium') {
                    lineSpeed = 9;
                }
                if (Foundation.MediaQuery.current === 'small') {
                    lineSpeed = 20;
                }
                var progress = this.getTotalLength() - posY * lineSpeed;

                // event when path has reached its full length
                if (progress < 0) {
                    var endEvent = new Event('pathEnd');
                    window.dispatchEvent(endEvent);
                }

                return progress;
            });
        }
    }]);

    return PathAnimation;
}();

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// First animation
var AnimatedSheet = __webpack_require__(0);

module.exports = new AnimatedSheet('#svg-1', {
    keyframes: [{
        from: 1627,
        to: 2023,
        remove: false,
        create: function create(svg) {
            this.element = svg.append('g').attr('class', 'bar').attr('transform', 'translate(' + (960 - 300) + ', 1400)').append('rect').attr('width', 600).attr('height', 50).attr('opacity', 1).attr('fill', '#FFFFFF');

            return this;
        },
        interpolate: function interpolate(svg, createScope, interpolatePercent) {
            var rotation = d3.interpolateNumber(0, 90);
            return svg.select('.bar rect').attr('transform', 'rotate(' + rotation(AnimatedSheet.easeOutElastic(interpolatePercent)) + ', 300, 25)');
        }
    }, {
        from: 1627,
        to: 2140,
        remove: true,
        create: function create(svg) {
            this.trajectoryPoints = [[960 - 275, 1355], [1920 - 50, 1000], [960 - 300, 3200]];
            this.trailcurve = d3.line().curve(d3.curveCatmullRom);
            this.trajectory = svg.selectAll('line').data(this.trajectoryPoints).enter().append('path').attr('d', this.trailcurve(this.trajectoryPoints)).attr('fill', 'none');
            this.element = svg.select('#icon-clipboard');

            return this;
        },
        interpolate: function interpolate(svg, createScope, interpolatePercent) {
            function translateAlong(path, percent) {
                var l = path.getTotalLength();
                var p = path.getPointAtLength(percent * l);
                return 'translate(' + (p.x - 40) + ', ' + (p.y - 36) + ')';
            }
            var rotation = d3.interpolateNumber(0, 360);

            return createScope.element.attr('transform', translateAlong(createScope.trajectory.node(), interpolatePercent) + 'rotate(' + rotation(interpolatePercent) + ', 30, 25)');
        }
    }, {
        from: 1627,
        to: 2240,
        remove: true,
        create: function create(svg) {
            this.trajectoryPoints = [[960 - 80, 1365], [1920 - 55, 1100], [960 - 300, 3000]];
            this.trailcurve = d3.line().curve(d3.curveCatmullRom);
            this.trajectory = svg.selectAll('line').data(this.trajectoryPoints).enter().append('path').attr('d', this.trailcurve(this.trajectoryPoints)).attr('fill', 'none');
            this.element = svg.select('#icon-database');

            return this;
        },
        interpolate: function interpolate(svg, createScope, interpolatePercent) {
            function translateAlong(path, percent) {
                var l = path.getTotalLength();
                var p = path.getPointAtLength(percent * l);
                return 'translate(' + (p.x - 40) + ', ' + (p.y - 36) + ')';
            }
            var rotation = d3.interpolateNumber(0, 360);

            return createScope.element.attr('transform', translateAlong(createScope.trajectory.node(), interpolatePercent) + 'rotate(' + rotation(interpolatePercent) + ', 30, 25)');
        }
    }, {
        from: 1627,
        to: 2240,
        remove: true,
        create: function create(svg) {
            this.element = svg.select('#icon-cloud');

            return this;
        },
        interpolate: function interpolate(svg, createScope, interpolatePercent) {
            var arc = d3.interpolateObject({ x: 960 + 100 - 40,
                y: 1333
            }, {
                x: 1920 - 600,
                y: 3000
            });
            var pos = arc(interpolatePercent);
            return svg.select('#icon-cloud').attr('transform', 'translate(' + pos.x + ', ' + pos.y + ')');
        }
    }, {
        from: 1627,
        to: 2240,
        remove: true,
        create: function create(svg) {
            this.element = svg.select('#icon-app');

            return this;
        },
        interpolate: function interpolate(svg, createScope, interpolatePercent) {
            var arc = d3.interpolateObject({ x: 960 + 300 - 70,
                y: 1325
            }, {
                x: 1920 - 300,
                y: 3200
            });
            var pos = arc(interpolatePercent);
            return svg.select('#icon-app').attr('transform', 'translate(' + pos.x + ', ' + pos.y + ')');
        }
    }]
});

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// Second animation
var AnimatedSheet = __webpack_require__(0);

module.exports = new AnimatedSheet('#svg-2', {
    keyframes: [{
        from: 0,
        to: 2000,
        remove: false,
        create: function create(svg) {
            var w = 1920; // resolution the viewbox scaling is based on
            var path = [[w / 2 + 800, -150], [w / 2 + 800, 600], [w / 2 + 100, 600], [w / 2 - 280, 980], [w / 2 - 500, 1200], [w / 2 - 500, 2150]];
            var bezierLine = d3.line().x(function (d) {
                return d[0];
            }).y(function (d) {
                return d[1];
            });

            this.progress = 0;

            this.element = svg.selectAll('line').data([window.pageYOffset]).enter().append('path').attr('d', bezierLine(path)).attr('stroke', '#FFFFFF').attr('stroke-width', 10).attr('fill', 'none')
            //.attr('stroke-linecap', 'round')
            .attr('stroke-dasharray', function () {
                var strokeLength = this.getTotalLength();
                this.progress = this.getTotalLength() - window.pageYOffset;
                return strokeLength + ' ' + strokeLength;
            }).attr('stroke-dashoffset', function () {
                return this.getTotalLength() - window.pageYOffset;
            });

            return this;
        },
        interpolate: function interpolate(svg, createScope, interpolatePercent) {
            this.element.attr('stroke-dashoffset', function () {
                var startY = $(svg.node()).offset().top;
                var posY = Math.max(0, window.pageYOffset + window.innerHeight / 2 - startY);
                var lineSpeed = 1.5;

                if (Foundation.MediaQuery.current === 'medium') {
                    lineSpeed = 4;
                }
                if (Foundation.MediaQuery.current === 'small') {
                    lineSpeed = 5;
                }
                var progress = this.getTotalLength() - posY * lineSpeed;

                // event when path has reached its full length
                if (progress < 0) {
                    var endEvent = new Event('path2End');
                    window.dispatchEvent(endEvent);
                }

                return progress;
            });
        }
    }, {
        from: 1450,
        to: 1550,
        remove: false,
        create: function create(svg) {
            this.element = svg.select('#chip').attr('z-index', 99).moveToFront();

            return this;
        },
        interpolate: function interpolate(svg, createScope, interpolatePercent) {
            var color = d3.interpolate('gray', 'white');
            return this.element.style('fill', color(interpolatePercent));
        }
    }, {
        from: 0,
        to: 2000,
        remove: false,
        create: function create(svg) {
            var w = 1920; // resolution the viewbox scaling is based on
            var path = [[w / 2 - 230, 1000], [w / 2 - 450, 1220], [w / 2 - 450, 2150]];
            var bezierLine = d3.line().x(function (d) {
                return d[0];
            }).y(function (d) {
                return d[1];
            });

            this.progress = 0;

            this.element = svg.selectAll('line').data([window.pageYOffset]).enter().append('path').attr('d', bezierLine(path)).attr('stroke', '#FFFFFF').attr('stroke-width', 10).attr('fill', 'none').attr('stroke-dasharray', function () {
                var strokeLength = this.getTotalLength();
                this.progress = this.getTotalLength() - window.pageYOffset;
                return strokeLength + ' ' + strokeLength;
            }).attr('stroke-dashoffset', function () {
                return this.getTotalLength() - window.pageYOffset;
            });

            return this;
        },
        interpolate: function interpolate(svg, createScope, interpolatePercent) {
            this.element.attr('stroke-dashoffset', function () {
                var svgY = $(svg.node()).offset().top;

                var lineSpeed = 1.5;
                var startY = svgY + 900;
                if (Foundation.MediaQuery.current === 'medium') {
                    lineSpeed = 3.90;
                    startY = svgY + 100;
                } else if (Foundation.MediaQuery.current === 'small') {
                    lineSpeed = 4;
                    startY = svgY;
                }

                var posY = Math.max(0, window.pageYOffset - startY);
                var progress = this.getTotalLength() - posY * lineSpeed;

                // event when path has reached its full length
                if (progress < 0) {
                    var endEvent = new Event('path2End');
                    window.dispatchEvent(endEvent);
                }

                return progress;
            });
        }
    }, {
        from: 1550,
        to: 2000,
        remove: false,
        create: function create(svg) {
            var w = 1920; // resolution the viewbox scaling is based on
            var path = [[w / 2 - 160, 1000], [w / 2 - 400, 1250], [w / 2 - 400, 2150]];
            var bezierLine = d3.line().x(function (d) {
                return d[0];
            }).y(function (d) {
                return d[1];
            });

            this.progress = 0;

            this.element = svg.selectAll('line').data([window.pageYOffset]).enter().append('path').attr('d', bezierLine(path)).attr('stroke', '#FFFFFF').attr('stroke-width', 10).attr('fill', 'none').attr('stroke-dasharray', function () {
                var strokeLength = this.getTotalLength();
                this.progress = this.getTotalLength() - window.pageYOffset;
                return strokeLength + ' ' + strokeLength;
            }).attr('stroke-dashoffset', function () {
                return this.getTotalLength() - window.pageYOffset;
            });

            return this;
        },
        interpolate: function interpolate(svg, createScope, interpolatePercent) {
            var self = this;
            this.element.attr('stroke-dashoffset', function () {
                var svgY = $(svg.node()).offset().top;

                var lineSpeed = 1.5;
                var startY = svgY + 900;
                if (Foundation.MediaQuery.current === 'medium') {
                    lineSpeed = 3.90;
                    startY = svgY + 100;
                } else if (Foundation.MediaQuery.current === 'small') {
                    lineSpeed = 4;
                    startY = svgY - 50;
                }

                var posY = Math.max(0, window.pageYOffset - startY);
                var progress = this.getTotalLength() - posY * lineSpeed;

                // event when path has reached its full length
                if (progress < 0) {
                    var endEvent = new Event('path2End');
                    window.dispatchEvent(endEvent);
                }

                return progress;
            });
        }
    }, {
        from: 1550,
        to: 2000,
        remove: false,
        create: function create(svg) {
            var w = 1920; // resolution the viewbox scaling is based on
            var path = [[w / 2 - 120, 1030], [w / 2 - 350, 1270], [w / 2 - 350, 2150]];
            var bezierLine = d3.line().x(function (d) {
                return d[0];
            }).y(function (d) {
                return d[1];
            });

            this.progress = 0;

            this.element = svg.selectAll('line').data([window.pageYOffset]).enter().append('path').attr('d', bezierLine(path)).attr('stroke', '#FFFFFF').attr('stroke-width', 10).attr('fill', 'none').attr('stroke-dasharray', function () {
                var strokeLength = this.getTotalLength();
                this.progress = this.getTotalLength() - window.pageYOffset;
                return strokeLength + ' ' + strokeLength;
            }).attr('stroke-dashoffset', function () {
                return this.getTotalLength() - window.pageYOffset;
            });

            return this;
        },
        interpolate: function interpolate(svg, createScope, interpolatePercent) {
            var self = this;
            this.element.attr('stroke-dashoffset', function () {
                var svgY = $(svg.node()).offset().top;

                var lineSpeed = 1.5;
                var startY = svgY + 900;
                if (Foundation.MediaQuery.current === 'medium') {
                    lineSpeed = 3.90;
                    startY = svgY + 100;
                } else if (Foundation.MediaQuery.current === 'small') {
                    lineSpeed = 4;
                    startY = svgY - 50;
                }

                var posY = Math.max(0, window.pageYOffset - startY);
                var progress = this.getTotalLength() - posY * lineSpeed;

                // event when path has reached its full length
                if (progress < 0) {
                    var endEvent = new Event('path2End');
                    window.dispatchEvent(endEvent);
                }

                return progress;
            });
        }
    }]
});

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// Third animation
var AnimatedSheet = __webpack_require__(0);

module.exports = new AnimatedSheet('#svg-3', {
    defs: [
    // TODO: is a filter independently usable for multiple elements?
    {
        filter: function filter(svg) {
            return svg.append("defs").append("filter").attr("id", "motionFilter1").append("feGaussianBlur").attr("class", "blurValues1").attr("in", "SourceGraphic").attr("stdDeviation", "10 10");
        }
    }, {
        filter: function filter(svg) {
            return svg.append("defs").append("filter").attr("id", "motionFilter2").append("feGaussianBlur").attr("class", "blurValues2").attr("in", "SourceGraphic").attr("stdDeviation", "10 10");
        }
    }, {
        filter: function filter(svg) {
            return svg.append("defs").append("filter").attr("id", "motionFilter3").append("feGaussianBlur").attr("class", "blurValues3").attr("in", "SourceGraphic").attr("stdDeviation", "10 10");
        }
    }, {
        filter: function filter(svg) {
            return svg.append("defs").append("filter").attr("id", "motionFilter4").append("feGaussianBlur").attr("class", "blurValues4").attr("in", "SourceGraphic").attr("stdDeviation", "10 10");
        }
    }],
    keyframes: [{
        from: 0,
        to: 2000,
        remove: false,
        create: function create(svg) {
            var w = 1920; // resolution the viewbox scaling is based on
            var h = 1080;
            var path = [[w / 2 - 500, -150], [w / 2 - 500, 150], [w / 2 - 810, 150], [w / 2 - 810, 480], [w / 2 - 580, 480], [w / 2 - 580, 2000]];
            var bezierLine = d3.line().x(function (d) {
                return d[0];
            }).y(function (d) {
                return d[1];
            });

            this.progress = 0;

            this.element = svg.selectAll('line').data([window.pageYOffset]).enter().append('path').attr('d', bezierLine(path)).attr('stroke', '#FFFFFF').attr('stroke-width', 10).attr('fill', 'none').attr('stroke-linecap', 'round').attr('stroke-dasharray', function () {
                var strokeLength = this.getTotalLength();
                this.progress = this.getTotalLength() - window.pageYOffset;
                return strokeLength + ' ' + strokeLength;
            }).attr('stroke-dashoffset', function () {
                return this.getTotalLength() - window.pageYOffset;
            });

            return this;
        },
        interpolate: function interpolate(svg, createScope, interpolatePercent) {
            var self = this;
            this.element.attr('stroke-dashoffset', function () {
                var startY = $(svg.node()).offset().top - window.innerHeight / 3;
                var posY = Math.max(0, window.pageYOffset - startY);
                var lineSpeed = 1.6;

                if (Foundation.MediaQuery.current === 'medium') {
                    lineSpeed = 4;
                }
                if (Foundation.MediaQuery.current === 'small') {
                    lineSpeed = 7;
                }
                var progress = this.getTotalLength() - posY * lineSpeed;

                // event when path has reached its full length
                if (progress < 0) {
                    var endEvent = new Event('path2End');
                    window.dispatchEvent(endEvent);
                }

                return progress;
            });
        }
    }, {
        from: 0,
        to: 2000,
        remove: false,
        create: function create(svg) {
            var w = 1920; // resolution the viewbox scaling is based on
            var h = 1080;
            var path = [[w / 2 - 450, -150], [w / 2 - 450, 20], [w / 2 - 240, 20], [w / 2 - 240, 950], [w / 2 - 520, 950], [w / 2 - 520, 1280], [w / 2 - 70, 1280], [w / 2 - 620, 2000]];
            var bezierLine = d3.line().x(function (d) {
                return d[0];
            }).y(function (d) {
                return d[1];
            });

            this.progress = 0;

            this.element = svg.selectAll('line').data([window.pageYOffset]).enter().append('path').attr('d', bezierLine(path)).attr('stroke', '#FFFFFF').attr('stroke-width', 10).attr('fill', 'none').attr('stroke-linecap', 'round').attr('stroke-dasharray', function () {
                var strokeLength = this.getTotalLength();
                this.progress = this.getTotalLength() - window.pageYOffset;
                return strokeLength + ' ' + strokeLength;
            }).attr('stroke-dashoffset', function () {
                return this.getTotalLength() - window.pageYOffset;
            });

            return this;
        },
        interpolate: function interpolate(svg, createScope, interpolatePercent) {
            //return;
            var self = this;
            this.element.attr('stroke-dashoffset', function () {
                var startY = $(svg.node()).offset().top - window.innerHeight / 3;
                var posY = Math.max(0, window.pageYOffset - startY);
                var lineSpeed = 1.95;

                if (Foundation.MediaQuery.current === 'medium') {
                    lineSpeed = 4;
                }
                if (Foundation.MediaQuery.current === 'small') {
                    lineSpeed = 7;
                }
                var progress = this.getTotalLength() - posY * lineSpeed;

                // event when path has reached its full length
                if (progress < 0) {
                    var endEvent = new Event('path2End');
                    window.dispatchEvent(endEvent);
                }

                return progress;
            });
        }
    }, {
        from: 0,
        to: 2000,
        remove: false,
        create: function create(svg) {
            var w = 1920; // resolution the viewbox scaling is based on
            var h = 1080;
            var path = [[w / 2 - 400, -150], [w / 2 - 400, -80], [w / 2 - 400, -30], [w / 2 - 200, -30], [w / 2 + 150, -30], [w / 2 + 150, 1350], [w / 2 + 490, 1350], [w / 2 + 490, 1680], [w / 2 + 40, 1680], [w / 2 - 750, 2000]];
            var bezierLine = d3.line().x(function (d) {
                return d[0];
            }).y(function (d) {
                return d[1];
            });

            this.progress = 0;

            this.element = svg.selectAll('line').data([window.pageYOffset]).enter().append('path').attr('d', bezierLine(path)).attr('stroke', '#FFFFFF').attr('stroke-width', 10).attr('fill', 'none').attr('stroke-linecap', 'round').attr('stroke-dasharray', function () {
                var strokeLength = this.getTotalLength();
                this.progress = this.getTotalLength() - window.pageYOffset;
                return strokeLength + ' ' + strokeLength;
            }).attr('stroke-dashoffset', function () {
                return this.getTotalLength() - window.pageYOffset;
            });

            return this;
        },
        interpolate: function interpolate(svg, createScope, interpolatePercent) {
            //return;
            var self = this;
            this.element.attr('stroke-dashoffset', function () {
                var startY = $(svg.node()).offset().top - window.innerHeight / 3;
                var posY = Math.max(0, window.pageYOffset - startY);
                var lineSpeed = 2.31;

                if (Foundation.MediaQuery.current === 'medium') {
                    lineSpeed = 4;
                }
                if (Foundation.MediaQuery.current === 'small') {
                    lineSpeed = 7;
                }
                var progress = this.getTotalLength() - posY * lineSpeed;

                // event when path has reached its full length
                if (progress < 0) {
                    var endEvent = new Event('path2End');
                    window.dispatchEvent(endEvent);
                }

                return progress;
            });
        }
    }, {
        from: 0,
        to: 2000,
        remove: false,
        create: function create(svg) {
            var w = 1920; // resolution the viewbox scaling is based on
            var h = 1080;
            var path = [[w / 2 - 350, -150], [w / 2 - 350, -80], [w / 2 + 200, -80], [w / 2 + 200, 550], [w / 2 + 690, 550], [w / 2 + 690, 1730], [w / 2 - 1120, 2000]];
            var bezierLine = d3.line().x(function (d) {
                return d[0];
            }).y(function (d) {
                return d[1];
            });

            this.progress = 0;

            this.element = svg.selectAll('line').data([window.pageYOffset]).enter().append('path').attr('d', bezierLine(path)).attr('stroke', '#FFFFFF').attr('stroke-width', 10).attr('fill', 'none').attr('stroke-linecap', 'round').attr('stroke-dasharray', function () {
                var strokeLength = this.getTotalLength();
                this.progress = this.getTotalLength() - window.pageYOffset;
                return strokeLength + ' ' + strokeLength;
            }).attr('stroke-dashoffset', function () {
                return this.getTotalLength() - window.pageYOffset;
            });

            return this;
        },
        interpolate: function interpolate(svg, createScope, interpolatePercent) {
            //return;
            var self = this;
            this.element.attr('stroke-dashoffset', function () {
                var startY = $(svg.node()).offset().top - window.innerHeight / 3;
                var posY = Math.max(0, window.pageYOffset - startY);
                var lineSpeed = 2.46;

                if (Foundation.MediaQuery.current === 'medium') {
                    lineSpeed = 4;
                }
                if (Foundation.MediaQuery.current === 'small') {
                    lineSpeed = 7;
                }
                var progress = this.getTotalLength() - posY * lineSpeed;

                // event when path has reached its full length
                if (progress < 0) {
                    var endEvent = new Event('path2End');
                    window.dispatchEvent(endEvent);
                }

                return progress;
            });
        }
    }, {
        from: 750,
        to: 950,
        remove: false,
        create: function create(svg) {
            this.element = svg.selectAll('#path-image-1').attr("filter", "url(#motionFilter1)").attr("opacity", 0);

            return this;
        },
        interpolate: function interpolate(svg, createScope, interpolatePercent) {
            var self = this;
            var transitionInterpolator = d3.interpolateNumber(400, 200);
            var opacityInterpolator = d3.interpolateNumber(0, 1);
            this.element.attr('visibility', 'visible').attr("transform", "translate(" + transitionInterpolator(interpolatePercent) + ", 200)").attr("opacity", opacityInterpolator(interpolatePercent));

            var blurInterpolator = d3.interpolateString("10 10", "0 0");
            d3.select("#motionFilter1 .blurValues1").attr("stdDeviation", blurInterpolator(interpolatePercent));
        }
    }, {
        from: 1050,
        to: 1250,
        remove: false,
        create: function create(svg) {
            this.element = svg.selectAll('#path-image-2').attr("filter", "url(#motionFilter2)").attr("opacity", 0);

            return this;
        },
        interpolate: function interpolate(svg, createScope, interpolatePercent) {
            var transitionInterpolator = d3.interpolateNumber(1000, 1200);
            var opacityInterpolator = d3.interpolateNumber(0, 1);
            var blurInterpolator = d3.interpolateString("10 10", "0 0");

            this.element.attr('visibility', 'visible').attr("transform", "translate(" + transitionInterpolator(interpolatePercent) + ", 600)").attr("opacity", opacityInterpolator(interpolatePercent));

            d3.select("#motionFilter2 .blurValues2").attr("stdDeviation", blurInterpolator(interpolatePercent));
        }
    }, {
        from: 1150,
        to: 1350,
        remove: false,
        create: function create(svg) {
            this.element = svg.selectAll('#path-image-3').attr("filter", "url(#motionFilter3)").attr("opacity", 0);

            return this;
        },
        interpolate: function interpolate(svg, createScope, interpolatePercent) {
            var transitionInterpolator = d3.interpolateNumber(700, 500);
            var opacityInterpolator = d3.interpolateNumber(0, 1);
            var blurInterpolator = d3.interpolateString("10 10", "0 0");

            this.element.attr('visibility', 'visible').attr("transform", "translate(" + transitionInterpolator(interpolatePercent) + ", 1000)").attr("opacity", opacityInterpolator(interpolatePercent));
            d3.select("#motionFilter3 .blurValues3").attr("stdDeviation", blurInterpolator(interpolatePercent));
        }
    }, {
        from: 1350,
        to: 1550,
        remove: false,
        create: function create(svg) {
            this.element = svg.selectAll('#path-image-4').attr("filter", "url(#motionFilter4)").attr("opacity", 0);

            return this;
        },
        interpolate: function interpolate(svg, createScope, interpolatePercent) {
            var transitionInterpolator = d3.interpolateNumber(800, 1000);
            var opacityInterpolator = d3.interpolateNumber(0, 1);
            var blurInterpolator = d3.interpolateString("10 10", "0 0");

            this.element.attr('visibility', 'visible').attr("transform", "translate(" + transitionInterpolator(interpolatePercent) + ", 1400)").attr("opacity", opacityInterpolator(interpolatePercent));

            d3.select("#motionFilter4 .blurValues4").attr("stdDeviation", blurInterpolator(interpolatePercent));
        }
    }]
});

/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,